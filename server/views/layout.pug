doctype html
html
  head
    title= title
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1')
    link(rel="icon" type="image/x-icon" href="/images/grocery.ico")
    // Bootstrap Font Icon CSS
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.5.0/font/bootstrap-icons.css">
    link(rel='stylesheet', href='/stylesheets/style.css')
  body

    nav
      h1 
        a(href="/").non-link Kali Grocery 

      ul.nav-links
        // res.locals is a way of passing down variables from middleware to views. example: res.locals.locals_categories. 
        if locals_categories != null || local_categories.length > 0
          li.dropdown 
              a.dropbtn(href="/catalog/categories") Categories
                i.bi.bi-chevron-down 
              div.dropdown-content 
                each cat, index in locals_categories 
                  if index < 1
                    a(href=cat.url) #{cat.name} 
                  else 
                    hr
                    a(href=cat.url) #{cat.name} 
        else 
          li 
            a(href="/catalog/categories") Categories 

        li 
          a(href="/catalog/subcategories") Subcategories
        li 
          a(href="/catalog/items") Items 
        li 
          a(href="/about") About

      .hamburger 
        a.icon(href="javascript:void(0)" onclick="hamburger()") 
          i.bi.bi-list

    .hamburger-dropdown 
      hr
      .hamburger-links 
          a(href="/catalog/categories") Categories 
          a(href="/catalog/subcategories") Subcategories
          a(href="/catalog/items") Items 
          a(href="/about") About 


  block content

  script. 
    hamburger = () => {
      const hamburgerDrop = document.querySelector(".hamburger-dropdown")
      if (hamburgerDrop.classList.contains("show")) {
        hamburgerDrop.classList.toggle("hide");
      } else {
        hamburgerDrop.classList.toggle("show");
      }
    }

    noImg = (imgElement) => {
      const imgContainer = imgElement.parentNode;

      console.log("noImg() CALLED");

      const p = document.createElement("p");
      p.innerHTML = "No image found";
      imgContainer.insertBefore(p, imgElement);
      imgContainer.classList.add("noImg");
      p.classList.add("noImg");
      imgElement.remove();

      // Image not found, do something here (e.g., display a default image)
      console.log('Image not found.');
    }






